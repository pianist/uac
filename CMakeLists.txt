PROJECT (uac)
CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

SET (FLAGS_DEFAULT  "-fPIC -pipe")
SET (FLAGS_WARNING  "-Wall -Werror -Wno-long-long -Wno-variadic-macros -Wno-strict-aliasing")# -Wextra -pedantic")
SET (FLAGS_CXX_LANG "-Wno-deprecated")
SET (FLAGS_RELEASE  "-O3 -fomit-frame-pointer -funroll-loops -DNDEBUG")
SET (FLAGS_DEBUG    "-ggdb")

SET (CMAKE_C_FLAGS_DEBUG     "${FLAGS_DEFAULT} ${FLAGS_WARNING} ${FLAGS_DEBUG}")
SET (CMAKE_C_FLAGS_RELEASE   "${FLAGS_DEFAULT} ${FLAGS_WARNING} ${FLAGS_DEBUG} ${FLAGS_RELEASE}")

SET (CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_C_FLAGS_DEBUG}   ${FLAGS_CXX_LANG}")
SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${FLAGS_CXX_LANG}")

IF (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  SET (CMAKE_BUILD_TYPE RELEASE)
  SET (CMAKE_BUILD_TYPE RELEASE CACHE STRING "Build type" FORCE)
ENDIF (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)

ADD_DEFINITIONS (-D__STDC_FORMAT_MACROS)
ADD_DEFINITIONS (-D_FILE_OFFSET_BITS=64)

SET (LIBDIR lib)
IF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
  SET (LIBDIR lib64)
ENDIF (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")

SET (CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX} ${CMAKE_SHARED_LIBRARY_SUFFIX})
SET (CMAKE_FIND_LIBRARY_PREFIXES ${CMAKE_STATIC_LIBRARY_PREFIX} ${CMAKE_SHARED_LIBRARY_PREFIX})
SET (FIND_LIBRARY_USE_LIB64_PATHS TRUE)
SET (LINK_SEARCH_END_STATIC TRUE)

FIND_PATH (INC_MAFSA_automaton_h MAFSA/automaton.h)
IF (INC_MAFSA_automaton_h)
  MESSAGE (STATUS "FOUND ${INC_MAFSA_automaton_h}/MAFSA.automaton.h")
  INCLUDE_DIRECTORIES (${INC_MAFSA_automaton_h})
ELSE ()
  MESSAGE (STATUS "ERROR ${INC_MAFSA_automaton_h} (MAFSA/automaton.h)")
ENDIF ()

FIND_LIBRARY (LIB_MAFSA MAFSA)
IF (LIB_MAFSA)
  MESSAGE (STATUS "FOUND ${LIB_MAFSA}")
ELSE ()
  MESSAGE (STATUS "ERROR ${LIB_MAFSA}")
ENDIF ()

ADD_LIBRARY (uac STATIC src/sla.c src/uac.c)
TARGET_LINK_LIBRARIES (uac ${LIB_MAFSA})

ADD_EXECUTABLE (uacc src/uacc.cpp)
TARGET_LINK_LIBRARIES (uacc uac )
ADD_CUSTOM_COMMAND (TARGET uacc POST_BUILD COMMAND ./uacc base.automaton ${CMAKE_CURRENT_SOURCE_DIR}/dict/base.txt)
ADD_CUSTOM_COMMAND (TARGET uacc POST_BUILD COMMAND ./uacc g_other.automaton ${CMAKE_CURRENT_SOURCE_DIR}/dict/g_other.txt)
ADD_CUSTOM_COMMAND (TARGET uacc POST_BUILD COMMAND ./uacc g_android.automaton ${CMAKE_CURRENT_SOURCE_DIR}/dict/g_android.txt)
ADD_CUSTOM_COMMAND (TARGET uacc POST_BUILD COMMAND ./uacc g_windows.automaton ${CMAKE_CURRENT_SOURCE_DIR}/dict/g_windows.txt)
ADD_CUSTOM_COMMAND (TARGET uacc POST_BUILD COMMAND ./uacc g_apple.automaton ${CMAKE_CURRENT_SOURCE_DIR}/dict/g_apple.txt)
ADD_CUSTOM_COMMAND (TARGET uacc POST_BUILD COMMAND ./uacc g_unix.automaton ${CMAKE_CURRENT_SOURCE_DIR}/dict/g_unix.txt)

ADD_EXECUTABLE (uac_detect src/uac_detect.c)
TARGET_LINK_LIBRARIES (uac_detect uac)

INSTALL (FILES src/uac.h DESTINATION include/uac)
INSTALL (TARGETS uac DESTINATION ${LIBDIR})
INSTALL (TARGETS uac_detect uacc DESTINATION bin)
INSTALL (FILES
	dict/base.txt
	dict/g_other.txt
	dict/g_android.txt
	dict/g_windows.txt
	dict/g_apple.txt
	dict/g_unix.txt
	${CMAKE_CURRENT_BINARY_DIR}/base.automaton
	${CMAKE_CURRENT_BINARY_DIR}/g_other.automaton
	${CMAKE_CURRENT_BINARY_DIR}/g_android.automaton
	${CMAKE_CURRENT_BINARY_DIR}/g_windows.automaton
	${CMAKE_CURRENT_BINARY_DIR}/g_apple.automaton
	${CMAKE_CURRENT_BINARY_DIR}/g_unix.automaton
	DESTINATION share/uac)

